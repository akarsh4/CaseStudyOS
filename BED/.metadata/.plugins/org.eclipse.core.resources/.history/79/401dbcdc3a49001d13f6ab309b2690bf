package com.sonata;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import com.sonata.controller.OrderController;
import com.sonata.model.orders;
import com.sonata.repository.OrderRepository;

@SpringBootTest
class OrderServiceApplicationTests {

	@Autowired
	OrderController ocon;
	
	@MockBean
	OrderRepository orepo;
	
	 @Test
		public void getCat() {
			when(orepo.findAll()).thenReturn((List<orders>) Stream.of(new orders(1L,2L,"Phonepe","Proccessing"),new orders(1L,2L,"Phonepe","Proccessing")).collect(Collectors.toList()));
			assertEquals(2,ocon.getAllOrder().size());
		}
	    @Test
	    public void saveProducts() {
	    	orders  orderprod = new orders(1L,2L,"Phonepe","Proccessing");
	    	when(orepo.save(orderprod)).thenReturn(orderprod);
	    	assertEquals(orderprod, ocon.saveOrder(orderprod));
	    }
	  @Test
	    public void deleteProducts() {
	    orders prod = new orders(1L,2L,"Phonepe","Proccessing");
	    	ocon.deleteOrders(prod.getProd_id());
	    	verify(orepo, times(1)).delete(prod);
	    	
	    }

	      @Test
	      public void getAllCartDataTest(){
	  List<Orders> products = prepository.findAll();
	            Assertions.assertThat(products.size()).isEqualTo(2);
	            
	            System.out.println(products);
	        }
	      
	      @Test 
	      public void testCreate() {
	    	  Orders p=new Orders();
	    	  p.setOrder_id(101L);
	    	
	    	  p.setPayment("Done");

	    	  
	    	  prepository.save(p);
	    	  assertNotNull(prepository.findById(101L).get());
	      }
	      
	      @Test
	      public void testReadALL() {
	    	  List <Orders> list=prepository.findAll();
	    	  assertThat(list).size().isGreaterThan(0);
	      }
	      @Test
	      public void testSingleProduct() {
	    	 Orders product=prepository.findById(1L).get();
	    	  assertEquals(101L,product.getOrder_id());
	      }
	      @Test
	    	  public void testUpdate() {
	    	  
	    	Orders p=prepository.findById(1L).get();
	    	  p.setPayment("fail");
	    	  prepository.save(p);
	    	  assertNotEquals("Success",prepository.findById(1L).get().getPayment());
	    	  
	    		  
	    	  }
	      
	      @Test
	      public void testDelete() {
	    	  prepository.deleteById(1L);
	    	  assertThat(prepository.existsById(1L)).isFalse();
	    	  
	      }

}
